#+TITLE: Init Emacs Config Builder
#+AUTHOR: Emanuele Altomare
#+OPTIONS: ^:{}
#+PROPERTY: header-args :tangle init.el

This file allows to build the /init.el/ which represents the Emacs config. The
use of an Org file is great because offers the possibility to document the
configuration that otherwise could be too cryptic.

With org babel tangle the /elisp/ code in all source structure templates are
inserted into /init.el/ file, so that Emacs can execute it on every boot and
apply configurations.

See also
[[https://youtu.be/O0RwLsnccYM?si=AvtKhxylhbP-ngXY&t=1435][Tamiano's video]], a very great content on the subject.

This file is intended to be into the =~/.emacs.d/= folder. In this way, when
=(org-babel-tangle)= is executed, it generates the /init.el/ file in the
correct path. It's possible to customize the path of the /init.el/ in the
properties of the header.

Only the first time the manually invocation of =(org-babel-tangle)= is needed.
The next times the /init.el/ is built on save.

In [[* Configuration file][this]] section, an optional additional configuration file is introduced which
is intended to contain personal or local machine configurations (but not
sensitive data, for passwords [[* Auth-Sources][auth sources]] should be used).

The code blocks of the additional configuration file are added inside the
/init.el/ file after the code blocks of the current file on save of one of the
two files by [[* Automatic tangle config files when saved][this]] code.

Most of the configurations of this file are taken from others during my Emacs
learning process, but for the largest part I did not save the author so I can't
report the source, I apologize in advance for that.

Most of the configurations in this file were adapted from others during my
Emacs learning process. Unfortunately, for the most part, I did not keep track
of the original authors, and so I can't report the source. I apologize for
that.

* Configuration file

** Set a variable with the path of this org file.

#+begin_src emacs-lisp
  (defvar emacs-config (expand-file-name "init.org" user-emacs-directory)
    "This variable contains the path of Emacs Config Builder file"
    )
#+end_src

** Set a variable with the path of 'personal' org config file

#+begin_src emacs-lisp
  (defvar emacs-config-personal (expand-file-name
                                 ".personal.org"
                                 user-emacs-directory)
     "This variable contains the path of Personal Emacs Config builder file.
  In this file goes personal configurations (but not sensitive like passwords)"
      )
#+end_src

** Add a function named 'open-emacs-conf' to open this file in a buffer in a new window

#+begin_src elisp
  (defun iecb/open-emacs-conf ()
    "Open the Emacs configuration file in a new window."
    (interactive)
    (let ((conf-file emacs-config))
      (when (file-exists-p conf-file)
        (find-file-other-window conf-file
                                ))))
#+end_src

** Automatic tangle config files when saved

#+begin_src emacs-lisp
  (defun iecb/org-babel-tangle-including(target &optional to-be-included)
    (when (file-exists-p (expand-file-name target))
      (let* ((active-buffer (current-buffer))
             (target-expanded (expand-file-name target))
             (to-be-included-expanded (expand-file-name
                                       (or to-be-included "<nonexistent>")))
             (target-name (file-name-nondirectory target-expanded))
             (target-dir (file-name-directory target-expanded))
             (tmp-file-name (expand-file-name
                             (concat ".tmp_" target-name)
                             target-dir))
             (org-confirm-babel-evaluate nil))
        (find-file tmp-file-name)
        (erase-buffer)
        (insert-file-contents target-expanded)
        (goto-char (point-max))
        (when (file-exists-p to-be-included-expanded)
          (insert (format "\n* Included From '%s'\n\n#+INCLUDE: \"%s\"\n"
                          to-be-included-expanded
                          to-be-included-expanded)))
        (org-mode)
        (require 'ox-org)
        (org-export-expand-include-keyword)
        (org-babel-tangle)
        (delete-file tmp-file-name)
        (kill-buffer)
        (switch-to-buffer active-buffer)
        )))

  (defun iecb/org-babel-tangle-config ()
    (when (or (string-equal (buffer-file-name)
                             (expand-file-name emacs-config))
              (string-equal (buffer-file-name)
                             (expand-file-name emacs-config-personal))
              )
      (iecb/org-babel-tangle-including emacs-config emacs-config-personal)))

  (add-hook 'org-mode-hook
            (lambda () (add-hook
                        'after-save-hook
                        #'iecb/org-babel-tangle-config)))
#+end_src

* Some variables

#+begin_src emacs-lisp
  (defvar os-terminal-path (replace-regexp-in-string "\n$" ""
                                                     (shell-command-to-string
                                                      "which bash")))
  (defvar os-repos-path "~/git/")
  (defvar os-packages-path "~/.emacs.d/modes")
#+end_src

* Security

** GNU Elpa keyring update

This package updates the GPG keys used by the ELPA package manager (a.k.a
`package.el') to verify authenticity of packages downloaded from the GNU ELPA
archive.

#+begin_src emacs-lisp
  (use-package gnu-elpa-keyring-update
    :ensure t)
#+end_src

** Auth-Sources

Add secrets (Secret API - GNOME Keyring) to the auth-sources

#+begin_src emacs-lisp
  (setq auth-sources '(default
                       "secrets:Login"
                       "~/.authinfo.gpg"
                       "~/.authinfo"
                       "~/.netrc"))
#+end_src

** Transparent Encryption

*** Org headline content

#+begin_src emacs-lisp
  (require 'org-crypt)
  (org-crypt-use-before-save-magic)
  (setq org-tags-exclude-from-inheritance '("crypt"))

  (setq org-crypt-key nil)
  ;; GPG key to use for encryption.
  ;; nil means  use symmetric encryption unconditionally.
  ;; "" means use symmetric encryption unless heading sets CRYPTKEY property.

  (setq auto-save-default nil)
  ;; Auto-saving does not cooperate with org-crypt.el: so you need to
  ;; turn it off if you plan to use org-crypt.el quite often.  Otherwise,
  ;; you'll get an (annoying) message each time you start Org.

  ;; To turn it off only locally, you can insert this:
  ;;
  ;; # -*- buffer-auto-save-file-name: nil; -*-
#+end_src

This allows to encrypt the content of an headline but not the headline or
properties.

It’s possible to use different keys for different headings by specifying the
respective key as property ‘CRYPTKEY’, e.g.:

#+begin_src org :tangle no
  ,* Totally secret :crypt:
    :PROPERTIES:
    :CRYPTKEY: 0x0123456789012345678901234567890123456789
    :END:
#+end_src

*** Org file

#+begin_src emacs-lisp
  (require 'epa-file)
  (epa-file-enable)
#+end_src

If you want to encrypt the whole file using gnupg, but still have the decrypted
file recognized as an org file, you should make:

#+begin_src org :tangle no
  # -*- mode:org; epa-file-encrypt-to: ("me@mydomain.com") -*-
#+end_src

the first line in the file. Where me@mydomain.com is the email address
associated with your default gnupg key. Note that gpg encrypted files should be
saved with the default extension of .gpg.

When you open the file you will be prompted for your password and Emacs will
display the decrypted contents in org-mode. When you save the file it would
automatically be encrypted.

* Syntax highlight

#+begin_src emacs-lisp
  (setq org-confirm-babel-evaluate nil
	org-src-fontify-natively t
	org-src-tab-acts-natively t)
#+end_src

* Do not load GNU Emacs buffer on boot

#+begin_src emacs-lisp
  (setq inhibit-startup-screen t)
#+end_src

* Add Auto Fill on (with 80 chars)

#+begin_src emacs-lisp
  ;(setq-default auto-fill-function 'do-auto-fill)
  (setq-default fill-column 79)
#+end_src

* Enable Emacs repos

#+begin_src emacs-lisp
  (require 'package)
  (add-to-list 'package-archives
               '("melpa-stable" . "https://stable.melpa.org/packages/") t)
#+end_src

* Themes

** Add hook 'after-load-theme-hook'

This hook allows to execute code after a theme is loaded with 'load-theme'
function.

#+begin_src emacs-lisp
  (defvar after-load-theme-hook nil
    "Hook run after a color theme is loaded using 'load-theme'.")
  (defadvice load-theme (after run-after-load-theme-hook activate)
    "Run 'after-load-theme-hook'."
    (run-hooks 'after-load-theme-hook))
#+end_src

** Visualization of the fill column line

Add the fill colum indicator line when we are in programming, configuration or
org modes.

#+begin_src emacs-lisp
  (defun iecb/display-fill-column-line ()
    (interactive)
    (display-fill-column-indicator-mode 1))

  (add-hook 'prog-mode-hook #'iecb/display-fill-column-line)
  (add-hook 'conf-mode-hook #'iecb/display-fill-column-line)
  (add-hook 'text-mode-hook #'iecb/display-fill-column-line)
  (add-hook 'org-mode-hook #'iecb/display-fill-column-line)
  (add-hook 'org-src-mode-hook #'iecb/display-fill-column-line)
#+end_src

** Theme functions

I tend to switch themes more often than normal. For example, switching
to a lighter theme (such as the default) or to a different theme
depending on the time of day or my mood. Normally, switching themes is
a multi-step process with ~disable-theme~ and ~load-theme~. The
~switch-theme~ function will do that in one swoop. I just choose which
theme I want to go to.

#+begin_src emacs-lisp
(defun switch-theme (theme)
  "Disables any currently active themes and loads THEME."
  ;; This interactive call is taken from `load-theme'
  (interactive
   (list
    (intern (completing-read "Load custom theme: "
                             (mapc 'symbol-name
                                   (custom-available-themes))))))
  (let ((enabled-themes custom-enabled-themes))
    (mapc #'disable-theme custom-enabled-themes)
    (load-theme theme t)))

(defun disable-active-themes ()
  "Disables any currently active themes listed in 'custom-enabled-themes'."
  (interactive)
  (mapc #'disable-theme custom-enabled-themes))

(bind-key "C-<f12>" 'switch-theme)
(bind-key "C-<f11>" 'disable-active-themes)
#+end_src

** Doom theme

#+begin_src emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    (customize-set-variable 'doom-molokai-brighter-comments t)
    ;(switch-theme 'doom-molokai)
    )
#+end_src

*** Doom modeline

Before /all the icons/ package is needed.

#+begin_src emacs-lisp
  (use-package all-the-icons
    :ensure t
    )
#+end_src

Next the first time it has to be called the following function to install all
icons

#+begin_src emacs-lisp :tangle no
  (all-the-icons-install-fonts)
#+end_src

Maybe some icons cannot be seen correctly, to fix that the *nerd-font* symbols
are needed.

At the [[https://github.com/ryanoasis/nerd-fonts][repo]], from the release section, it's possible to download [[https://github.com/ryanoasis/nerd-fonts/releases/download/v3.4.0/NerdFontsSymbolsOnly.tar.xz][NerdFontsSymbolsOnly.tar.xz]]
The content goes to =~/.local/share/fonts=.

The following Example could be used to accomplish the job.

#+begin_src bash :tangle no
  wget \
      https://github.com/ryanoasis/nerd-fonts/releases/download/v3.4.0/NerdFontsSymbolsOnly.tar.xz \
      -O /tmp/symbols.tar.xz
  mkdir -p ~/.local/share/fonts
  tar -xvf /tmp/symbols.tar.xz --directory ~/.local/share/fonts --wildcards \
      --no-anchored "*.ttf"
  fc-cache -f -v
#+end_src

It's possible to jump the previous steps and install nerd-fonts with the help
of /all the icons/ package.

#+begin_src emacs-lisp :tangle no
  (nerd-icons-install-fonts)
#+end_src

#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    )
#+end_src 

** Spacemacs

#+begin_src emacs-lisp
  (use-package spacemacs-theme
    :if (window-system)
    :ensure t
    :defer t
    :init
    (switch-theme 'spacemacs-dark)
    )
#+end_src

** Cyberpunk theme

#+begin_src emacs-lisp :tangle no
(use-package cyberpunk-theme
  :if (window-system)
  :ensure t
  :init
  (progn
    (set-face-attribute `mode-line nil
                        :box nil)
    (set-face-attribute `mode-line-inactive nil
                        :box nil)))
#+end_src

** Solarized theme

Here's some configuration for [[https://github.com/bbatsov/solarized-emacs/][bbatsov's solarized themes]].

#+begin_src emacs-lisp :tangle no
(use-package solarized-theme
  :ensure t
  :init
  (setq solarized-use-variable-pitch nil)
)
#+end_src

** Monokai theme

#+begin_src emacs-lisp :tangle no
(use-package monokai-theme
  :if (window-system)
  :ensure t
  :init
  (setq monokai-use-variable-pitch nil)
 )
#+end_src

** Waher theme

#+begin_src emacs-lisp :tangle no
(use-package waher-theme
  :if (window-system)
  :ensure t
)
#+end_src

* Remove toolbars

#+begin_src emacs-lisp
  (tool-bar-mode 0)
  (menu-bar-mode 0)
  (toggle-scroll-bar 0)
#+end_src

* Some defaults

Start with some default settings

Sources for this section include [[https://github.com/magnars/.emacs.d/blob/master/settings/sane-defaults.el][Magnars Sveen]] and [[http://pages.sachachua.com/.emacs.d/Sacha.html][Sacha Chua]].

#+begin_src emacs-lisp
  ;; Do not ask to follow symlinks
  (setq vc-follow-symlinks t)

  ;; These functions are useful. Activate them.
  (put 'downcase-region 'disabled nil)
  (put 'upcase-region 'disabled nil)
  (put 'narrow-to-region 'disabled nil)
  (put 'dired-find-alternate-file 'disabled nil)

  ;; Answering just 'y' or 'n' will do
  (defalias 'yes-or-no-p 'y-or-n-p)

  ;; Keep all backup and auto-save files in one directory
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
  (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))

  ;; UTF-8 please
  (setq locale-coding-system 'utf-8) ; pretty
  (set-terminal-coding-system 'utf-8) ; pretty
  (set-keyboard-coding-system 'utf-8) ; pretty
  (set-selection-coding-system 'utf-8) ; please
  (prefer-coding-system 'utf-8) ; with sugar on top

  ;; Turn off the blinking cursor
  (blink-cursor-mode -1)

  (setq-default indent-tabs-mode nil)
  (setq-default indicate-empty-lines t)

  ;; Don't count two spaces after a period as the end of a sentence.
  ;; Just one space is needed.
  (setq sentence-end-double-space nil)

  ;; delete the region when typing, just like as we expect nowadays.
  (delete-selection-mode t)

  (show-paren-mode t)

  (column-number-mode t)

  (global-visual-line-mode)

  (setq uniquify-buffer-name-style 'forward)

  (setq shell-command-switch "-c")

  ;; Don't beep at me
  (setq visible-bell nil)
  (setq ring-bell-function (lambda () nil))

  ;; Stop Emacs from losing information
  (setq undo-limit 20000000)
  (setq undo-strong-limit 40000000)

  ;; add line numbers when programming or configuring
  (add-hook 'prog-mode-hook #'display-line-numbers-mode)
  (add-hook 'conf-mode-hook #'display-line-numbers-mode)
#+end_src

Here we make page-break characters look pretty, instead of appearing as =^L= in
Emacs. Here's an informative article called [[http://ericjmritz.name/2015/08/29/using-page-breaks-in-gnu-emacs/]["Using Page-Breaks in GNU Emacs"]] by
Eric J. M. Ritz.

#+begin_src emacs-lisp
(use-package page-break-lines
  :ensure t)
#+end_src

** Org templates

*Enable org-tempo*

#+begin_src emacs-lisp
(require 'org-tempo)
#+end_src

*Source block templates*

#+begin_src emacs-lisp
  (with-eval-after-load 'org-tempo
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python :results output"))
    (add-to-list 'org-structure-template-alist '("md" . "src markdown"))
    (add-to-list 'org-structure-template-alist '("sh" . "src sh"))
    (add-to-list 'org-structure-template-alist '("bash" . "src bash"))
    (add-to-list 'org-structure-template-alist '("verb" . "src verb"))
    (add-to-list 'org-structure-template-alist '("clang" . "src C")))
#+end_src

* Emacs windows, buffers, ecc..

** Define 'toggle-window-split'

This function allows to change the window split from orizontal to vertical and
from vertical to orizontal when 2 buffers are opened.

It can be activated with "C-x |" key binding.

#+begin_src emacs-lisp
  (defun iecb/toggle-window-split ()
    (interactive)
    (if (= (count-windows) 2)
        (let* ((this-win-buffer (window-buffer))
           (next-win-buffer (window-buffer (next-window)))
           (this-win-edges (window-edges (selected-window)))
           (next-win-edges (window-edges (next-window)))
           (this-win-2nd (not (and (<= (car this-win-edges)
                       (car next-win-edges))
                       (<= (cadr this-win-edges)
                       (cadr next-win-edges)))))
           (splitter
            (if (= (car this-win-edges)
               (car (window-edges (next-window))))
            'split-window-horizontally
          'split-window-vertically)))
      (delete-other-windows)
      (let ((first-win (selected-window)))
        (funcall splitter)
        (if this-win-2nd (other-window 1))
        (set-window-buffer (selected-window) this-win-buffer)
        (set-window-buffer (next-window) next-win-buffer)
        (select-window first-win)
        (if this-win-2nd (other-window 1))))))

  (global-set-key (kbd "C-x |") 'iecb/toggle-window-split)
#+end_src

** List buffers

ibuffer is the improved version of list-buffers.

#+begin_src emacs-lisp
(defalias 'list-buffers 'ibuffer)
#+end_src

source: http://ergoemacs.org/emacs/emacs_buffer_management.html

#+begin_src emacs-lisp
(add-hook 'dired-mode-hook 'auto-revert-mode)

;; Also auto refresh dired, but be quiet about it
(setq global-auto-revert-non-file-buffers t)
(setq auto-revert-verbose nil)
#+end_src

source: [[http://whattheemacsd.com/sane-defaults.el-01.html][Magnars Sveen]]

** Smoothscrolling

This makes it so ~C-n~-ing and ~C-p~-ing won't make the buffer jump
around so much.

#+begin_src emacs-lisp
(use-package smooth-scrolling
  :ensure t
  :config
  (smooth-scrolling-mode))
#+end_src

** Enable 'ace-window'

This package allows to rapidly move between windows.

#+begin_src emacs-lisp
  (use-package ace-window
    :ensure t)

  (global-set-key (kbd "C-x o") 'ace-window)
#+end_src

** Beacon

It shows a "flash" on a line of the point of the newly selected window.

It is useful to rapidly understand what window is active.

#+begin_src emacs-lisp
  (use-package beacon
    :ensure t
    :config
    (beacon-mode 1)
    )
#+end_src

* Writing

** Olivetti

This is an Emacs minor mode to facilitate the process of writing text.

#+begin_src emacs-lisp
  (use-package olivetti
    :ensure t
    )
#+end_src

* Shell

** Eshell

*** Change key binding for shell command to use eshell command

#+begin_src emacs-lisp
  (global-set-key (kbd "M-!") 'eshell-command)
#+end_src

*** Add bcat function

#+begin_src emacs-lisp
  (defun eshell/bcat (&rest args)
    "Output the contents of one or more buffers as a string. "
    ;; Convert args (either buffer refs or strings) into buffers:
    (let ((buffers (mapcar #'get-buffer args)))
      ;; Combine output from all buffers, separated by newlines:
      (mapconcat (lambda (buf)
                   (save-window-excursion
                     (switch-to-buffer buf)
                     (buffer-substring-no-properties (point-min) (point-max))))
                 buffers "\n")))
#+end_src

This function allows to redirect one or more buffer content to the eshell, in
this way it's possible to use it like =cat=.

#+begin_example
$ eshell/bcat <buffer0> <buffer1> ... | cat > file.txt
#+end_example

eshell can use Tramp to connect remotely, so with the help of this function
it's possible to transfer a buffer content to the remote machine stdout and use
it as an input for other shell commands in one shot, cool!

for the "reverse way" eshell already allows to redirect the stdout to a buffer,
with the following syntax.

#+begin_example
  $ echo "Hello" > #<buffer buffer-name>
#+end_example

* Org Setup

Speed commands are a nice and quick way to perform certain actions while at the
beginning of a heading. It's not activated by default.

See the doc for speed keys by checking out [[elisp:(info "(org) speed keys")][the documentation for speed keys in Org mode]].

#+begin_src emacs-lisp
  (setq org-use-speed-commands t)
  (setq org-image-actual-width 550)
  (setq org-highlight-latex-and-related '(latex script entities))
  (setq org-hide-emphasis-markers nil) ; show always the syntax to produce the
                                       ; effect
#+end_src

** Org tags

The default value is -77, which is weird for smaller width windows. I'd rather
have the tags align horizontally with the header. 45 is a good column number to
do that.

#+begin_src emacs-lisp
(setq org-tags-column 45)
#+end_src

** Org exporting

*** LaTeX exporting

I've had issues with getting BiBTeX to work correctly with the LaTeX exporter
for PDF exporting. By changing the command to `latexmk` references appear in
the PDF output like they should. Source: http://tex.stackexchange.com/a/161619.

#+begin_src emacs-lisp
(setq org-latex-pdf-process (list "latexmk -pdf %f"))
#+end_src

*** Markdown

It is included in latest version but should be enabled

#+begin_src emacs-lisp
  (eval-after-load "org"
    '(require 'ox-md nil t))
#+end_src

*** TODO PDF

* Font

[[https://github.com/tonsky/FiraCode][Fira Code]] is a nice monospaced font.

To install it on Fedora, install the package ~fira-code-font~.

#+begin_src sh :tangle no
sudo dnf install fira-code-font
#+end_src

And here's how we tell Emacs to use the font we want to use.

#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist
               '(font . "Fira Code-10.5")
               )
#+end_src

Note: To view all fonts that are available to use, run the following:

#+begin_src emacs-lisp :tangle no
(font-family-list)
#+end_src

Display emojis. Source of system-specific fonts is in
[[https://github.com/syohex/emacs-ac-emoji][the README for the emacs-ac-emoji package]].

#+begin_src emacs-lisp
(set-fontset-font t 'unicode "Symbola" nil 'prepend)
#+end_src

* Chat

** ERC (Emacs IRC client) configuration

#+begin_src emacs-lisp
  (setq erc-track-shorten-start 8
        erc-hide-list '("JOIN" "PART" "QUIT")
        erc-kill-buffer-on-part t
        erc-auto-query 'bury)

  (defun iecb/irc-connect ()
    (interactive)
    (erc-tls :id erc-instance)) ; this varaible must be set when the function is
                                ; called. This can be set into personal config
                                ; builder, which personal IRC configs should
                                ; stay.
#+end_src

To add a secrete using Secrets API (for example if GNOME Keyring is used), can
be executed the following code with the proper data:

#+begin_src emacs-lisp :tangle no
  (secrets-create-item "<keyring>" "<irc-server>" "<password>"
                       :nick "<nick>" :full-name "<full name>")
#+end_src

** TODO Telega (Telegram Client) - WIP

#+begin_src emacs-lisp :tangle no
  (use-package telega
    :ensure t)

  (setq telega-use-docker t)
#+end_src

It' used with docker so we have to pull the latest image with:

#+begin_src bash :tangle no
  docker pull zevlg/telega-server:latest
#+end_src

* Magit

A great interface for git projects. It's much more pleasant to use
than the git interface on the command line. Use an easy keybinding to
access magit.

#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :defer t
    :bind (("C-c g" . 'magit-status)
           ("C-c G" . 'magit-dispatch)
           ("C-c m l" . 'magit-log-buffer-file)
           ("C-c m b" . 'magit-blame))
    :config
    (setq magit-display-buffer-function
          'magit-display-buffer-same-window-except-diff-v1)
    (setq magit-diff-refine-hunk t))
#+end_src

** Forge

Magit extension to interact with GitHub/GitLab.

#+begin_src emacs-lisp
(use-package forge
  :ensure t
  :after magit)
#+end_src

* Productivity

** Yasnippet

This is a template system. It allows to use a keyword to produce a template or
boilerplate code.

#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    (setq yas-snippet-dirs (list (concat os-repos-path "emacs-snippets")))
    (yas-global-mode 1)
    )
#+end_src

** Company-mode

This enables auto-completion menu.

#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :defer 2
    :config
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 3)
    (setq company-selection-wrap-around t)
    (company-tng-configure-default)
    ; the CAPF back-end provides a bridge to the standard
    ; completion-at-point-functions facility, and thus works with any major mode
    ; that uses the common protocol.
    (push 'company-capf company-backends)
    (global-company-mode 1)
    )
#+end_src

** Vertico

Vertico provides a performant and minimalistic vertical completion UI based on
the default completion system.

#+begin_src emacs-lisp
  ;; Enable Vertico.
  (use-package vertico
    :ensure t
    :custom
    (vertico-scroll-margin 0) ;; Different scroll margin
    (vertico-count 20) ;; Show more candidates
    (vertico-resize t) ;; Grow and shrink the Vertico minibuffer
    (vertico-cycle t) ;; Enable cycling for `vertico-next/previous'
    :init
    (vertico-mode))

  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (use-package savehist
    :ensure t
    :init
    (savehist-mode))

  ;; Emacs minibuffer configurations.
  (use-package emacs
    :custom
    ;; Support opening new minibuffers from inside existing minibuffers.
    (enable-recursive-minibuffers t)
    ;; Hide commands in M-x which do not work in the current mode.  Vertico
    ;; commands are hidden in normal buffers. This setting is useful beyond
    ;; Vertico.
    (read-extended-command-predicate #'command-completion-default-include-p)
    ;; Do not allow the cursor in the minibuffer prompt
    (minibuffer-prompt-properties
     '(read-only t cursor-intangible t face minibuffer-prompt)))

  ;; Allows to add description in minibuffer for example when M-x is pressed
  (use-package marginalia
    :ensure t
    :config
    (marginalia-mode))

  ;; Use the 'orderless' completion style.
  (use-package orderless
    :ensure t
    :custom
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (orderless-style-dispatchers '(+orderless-consult-dispatch orderless-affix-dispatch))
    (orderless-component-separator #'orderless-escapable-split-on-space)
    (completion-styles '(orderless basic))
    (completion-category-defaults nil)
    (completion-category-overrides '((file (styles partial-completion)))))

  ;; Replace `vertico-insert' to enable TAB prefix expansion.
  (keymap-set vertico-map "TAB" #'minibuffer-complete)
#+end_src

** Swiper (not used anymore - Use [[* Consult][Consult]])

It allows to do an advanced search in the current buffer and show the results
in a buffer where it's possible to scroll and select among multiple results. It
shows also the line number of the results.

#+begin_src emacs-lisp :tangle no
  (use-package swiper
    :ensure t
    :config
    (global-set-key (kbd ("C-s") 'swiper)
    )
#+end_src

** Consult

#+begin_src emacs-lisp
  (use-package consult
    :ensure t
    :config
    (global-set-key (kbd "C-s") 'consult-line)
    (global-set-key (kbd "C-r") 'consult-line)
    (global-set-key (kbd "C-S-s") 'consult-line-multi)
    (global-set-key (kbd "M-y") 'consult-yank-from-kill-ring)
    (global-set-key (kbd "C-x b") 'consult-buffer)
    (global-set-key (kbd "M-g M-g") 'consult-goto-line)
    (recentf-mode)
    )
#+end_src

** Embark

Embark makes it easy to choose a command to run based on what is near point,
both during a minibuffer completion session and in normal buffers.

#+begin_src emacs-lisp
  (use-package embark
    :ensure t

    :bind
    (("C-." . embark-act)         ;; pick some comfortable binding
     ("C-;" . embark-dwim)        ;; good alternative: M-.
     ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

    :init

    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)

    ;; Show the Embark target at point via Eldoc. You may adjust the
    ;; Eldoc strategy, if you want to see the documentation from
    ;; multiple providers. Beware that using this can be a little
    ;; jarring since the message shown in the minibuffer can be more
    ;; than one line, causing the modeline to move up and down:

    ;; (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
    ;; (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)

    :config

    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))

  ;; Consult users will also want the embark-consult package.
  (use-package embark-consult
    :ensure t ; only need to install it, embark loads it after consult if found
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

For example it's possible to select a region, press "C-." and select a proper
operation for that region, cool!

** Expand region

It allows to expand a region in a sematically correct way.

#+begin_src emacs-lisp
  (use-package expand-region
    :ensure t
    :config
    (require 'expand-region)
    (global-set-key (kbd "C-=") 'er/expand-region)
    )
#+end_src

** Gptel (AI integration)

Gptel allows to integrate every LLM in Emacs editor

#+begin_src emacs-lisp
  (use-package gptel
    :ensure t
    )
#+end_src

*** Gptel function complete

#+begin_src emacs-lisp
  (use-package gptel-fn-complete
    :ensure t
    :after gptel
    :config
    (setopt gptel-rewrite-default-action 'accept)
    )

  (defvar my-xref-map
    (let ((map (make-sparse-keymap)))
      (define-key map (kbd "c") #'gptel-fn-complete)
      (define-key map (kbd ".") #'xref-find-definitions)
      (define-key map (kbd ",") #'xref-go-back)
      (define-key map (kbd "/") #'xref-find-references)
      map)
    "My key customizations for AI and xref.")

  (global-set-key (kbd "C-c .") my-xref-map)
#+end_src

To start using it, it's possible to use:
#+begin_src emacs-lisp :tangle no
  (gptel)
#+end_src

The *API key* in the authsource *is needed*.

** TRAMP (Remote host editing)

TRAMP allows to use editing, directory listings and shell with a remote host in
the same way those things are possible in the local host.

For example to navigate a file it's possible to do
=C-x C-f /ssh:user@remote:/path/to/file=.

It's possible to use proxies to navigate to a remote host, like =ProxyJump=
option of SSH. To achieve this it's possible to add a proxy into TRAMP as the
example below.

#+begin_src emacs-lisp :tangle no
  (add-to-list 'tramp-default-proxies-alist
                   '("hostb" nil "/ssh:usera@hosta:"))
#+end_src

And then it's possible to do =/ssh:userb@hostb:= to have access to the *hostb*
passing through *hosta* in the same way as =ssh -J usera@hosta userb@hostb=
command can do.

*** LXD TRAMP

This add to TRAMP the possibility to connect to an LXD container in the same
way it allows to connect to an SSH host.

Thanks to [[https://github.com/onixie][Yc. Shen]] I take the following code from its [[https://github.com/onixie/lxd-tramp][repo]] and I modified it a
little.

#+begin_src emacs-lisp
  (eval-when-compile (require 'cl-lib))
  (require 'tramp)
  (require 'subr-x)

  (defgroup lxd-tramp nil
    "TRAMP integration for LXD containers."
    :prefix "lxd-tramp-"
    :group 'applications
    :link '(url-link :tag "GitHub" "https://github.com/onixie/lxd-tramp.git")
    :link '(emacs-commentary-link :tag "Commentary" "lxd-tramp"))

  (defcustom lxd-tramp-lxc-executable "lxc"
    "Path to lxc executable."
    :type 'string
    :group 'lxd-tramp)

  ;;;###autoload
  (defconst lxd-tramp-completion-function-alist
    '((lxd-tramp--parse-running-containers  ""))
    "Default list of (FUNCTION FILE) pairs to be examined for lxd method.")

  ;;;###autoload
  (defconst lxd-tramp-method "lxd"
    "Method to connect to LXD containers.")

  (defun lxd-tramp--running-containers ()
    "Collect running container names."
    (cl-rest
     (cl-loop for line in (ignore-errors (process-lines
                                          lxd-tramp-lxc-executable
                                          "list"
                                          "--columns=n")) ; Note: --format=csv only exists after version 2.13
              for count from 1
              when (cl-evenp count) collect (string-trim (substring line 1 -1)))))

  (defun lxd-tramp--parse-running-containers (&optional ignored)
    "Return a list of (user host) tuples.

  TRAMP calls this function with a filename which is IGNORED.  The
  user is an empty string because the lxd TRAMP method uses bash
  to connect to the default user containers."
    (cl-loop for name in (lxd-tramp--running-containers)
             collect (list "" name)))

  ;;;###autoload
  (defun lxd-tramp-add-method ()
    "Add lxd tramp method."
    (add-to-list 'tramp-methods
                 `(,lxd-tramp-method
                   (tramp-login-program ,lxd-tramp-lxc-executable)
                   (tramp-login-args (("exec") ("%h") ("--") ("su - %u")))
                   (tramp-remote-shell "/bin/bash")
                   (tramp-remote-shell-args ("-i" "-c")))))

  ;;;###autoload
  (eval-after-load 'tramp
    '(progn
       (lxd-tramp-add-method)
       (tramp-set-completion-function lxd-tramp-method
                                      lxd-tramp-completion-function-alist)))

  (provide 'lxd-tramp)
#+end_src

To open a file it's possible to do as the example below

#+begin_example
  C-x C-f /lxd:user@container:/path/to/file
#+end_example

* Restclient (archived - see [[*Verb][verb]])

See [[http://emacsrocks.com/e15.html][Emacs Rocks! Episode 15]] to learn how restclient can help out with
testing APIs from within Emacs. The HTTP calls you make in the buffer
aren't constrainted within Emacs; there's the
=restclient-copy-curl-command= to get the equivalent =curl= call
string to keep things portable.

#+begin_src emacs-lisp :tangle no
(use-package restclient
  :ensure t
  :mode ("\\.restclient\\'" . restclient-mode))
#+end_src

* Verb

An alternative to Restclient which was removed from the MELPA repository

#+begin_src emacs-lisp
  (use-package verb
    :ensure t)
#+end_src

* Syntax modes and programming stuffs

** JSON

#+begin_src emacs-lisp
(use-package json-mode
  :ensure t
  :config
  (customize-set-variable 'json-mode-hook
                          #'(lambda ()
                              (setq tab-width 2))))
#+end_src

define also a function to format JSON and set a hook to format the buffer
content when JSON mode is enabled.

#+begin_src emacs-lisp
  (defun iecb/json-format ()
    (interactive)
    (let ((b (if mark-active (min (point) (mark)) (point-min)))
          (e (if mark-active (max (point) (mark)) (point-max))))
      (shell-command-on-region b e
                               "python -mjson.tool" (current-buffer) t)))

  (add-hook 'json-mode-hook #'iecb/json-format)
#+end_src

** YAML

#+begin_src emacs-lisp
(use-package yaml-mode
  :ensure t)
#+end_src

** Jinja2

#+begin_src emacs-lisp
(use-package jinja2-mode
  :ensure t)
#+end_src

** Nginx

#+begin_src emacs-lisp
(use-package nginx-mode
  :ensure t
  :config
  (setq nginx-indent-level 2))
#+end_src

** PHP

#+begin_src emacs-lisp
  (use-package php-mode
    :ensure t)
#+end_src

** Enable some languages to be executed inside code blocks

#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)
     (C . t)
     (calc . t)
     (latex . t)
     (java . t)
     (ruby . t)
     (lisp . t)
     (scheme . t)
     (shell . t)
     (sqlite . t)
     (verb . t)
     (js . t)))
#+end_src
